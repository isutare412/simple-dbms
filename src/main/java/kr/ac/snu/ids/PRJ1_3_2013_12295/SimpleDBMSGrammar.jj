options
{
  //keywords can be both upper or lower case
  IGNORE_CASE = true;
}

PARSER_BEGIN(SimpleDBMSParser)
package kr.ac.snu.ids.PRJ1_3_2013_12295;
import java.io.UnsupportedEncodingException;
import java.io.File;
import java.util.ArrayList;

import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.Cursor;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;

import kr.ac.snu.ids.PRJ1_3_2013_12295.database.*;
import kr.ac.snu.ids.PRJ1_3_2013_12295.query.*;

public class SimpleDBMSParser
{
  //constants to distinguish query and print outputs.
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC = 3;
  public static final int PRINT_INSERT = 4;
  public static final int PRINT_DELETE = 5;
  public static final int PRINT_SELECT = 6;
  public static final int PRINT_SHOW_TABLES = 7;

  private static String PROMPT = "DB_2013-12295> ";

  public static DBManager manager;
  
  public static void main(String args[]) throws ParseException
  {
    manager = new DBManager();

    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    System.out.print(PROMPT);

    while (true)
    {
      try
      {
        parser.command();
      }
      catch (DBException dbe)
      {
        System.out.println(dbe.getMessage());
        SimpleDBMSParser.ReInit(System.in);
        System.out.print(PROMPT);
      }
      catch (ParseException e)
      {
        printMessage(PRINT_SYNTAX_ERROR);
        SimpleDBMSParser.ReInit(System.in);
        System.out.print(PROMPT);
      }
      catch (Exception e)
      {
        System.out.println(e.getMessage());
        SimpleDBMSParser.ReInit(System.in);
        System.out.print(PROMPT);
      }
    }

  }

  public static void printMessage(int q)
  {
    //q is given by query() below
    switch(q)
    {
      case PRINT_SYNTAX_ERROR:
        System.out.println("Syntax error");
        break;
      case PRINT_CREATE_TABLE:
        System.out.println("\'CREATE TABLE\' requested");
        break;
      case PRINT_DROP_TABLE:
        System.out.println("\'DROP TABLE\' requested");
        break;
      case PRINT_DESC:
        System.out.println("\'DESC\' requested");
        break;
      case PRINT_INSERT:
        System.out.println("\'INSERT\' requested");
        break;
      case PRINT_DELETE:
        System.out.println("\'DELETE\' requested");
        break;
      case PRINT_SELECT:
        System.out.println("\'SELECT\' requested");
        break;
      case PRINT_SHOW_TABLES:
        System.out.println("\'SHOW TABLES\' requested");
        break;
    }
  }
}

PARSER_END(SimpleDBMSParser)

SKIP : { < SPACE: " " > | <  TAB : "\t" > | < EOL : "\r\n" | "\n" | "\r" > }

//key word on top of < LEGAL_IDENTIFIER > so keyword is detected first
TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE : "create" >
| < TABLE : "table" >
| < DROP : "drop" >
| < DESC : "desc" >
| < INSERT : "insert" >
| < INTO : "into" >
| < DELETE : "delete" >
| < SELECT : "select" >
| < SHOW : "show" >
| < TABLES : "tables" >
| < VALUES : "values" >
| < WHERE : "where" >
| < PRIMARY : "primary" >
| < FOREIGN : "foreign" >
| < KEY : "key" >
| < REFERENCES : "references" >
| < NULL : "null" >
| < NOT : "not" >
| < OR : "or" >
| < AS : "as" >
| < FROM : "from" >
| < AND : "and" >
| < IS : "is" >
| < ASTERISK : "*" >
}

//building blocks for the functions below
TOKEN :	//used in functions
{
  < END : < SEMICOLON >(< SPACE > | < TAB >)*< EOL >>
| < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < PERIOD : "." >
| < COMP_OP : ">" | "<" | ">=" | "<=" | "!=" | "=" >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < DATE_VALUE : < NNNN >"-"< NN >"-"< NN > >
| < CHAR_STRING : < QUOTE >(< NON_QUOTE_CHARACTER >)*< QUOTE > >
}


//used to make token block above
TOKEN :	//used to make token
{
  < NNNN : < DIGIT >< DIGIT >< DIGIT >< DIGIT > >
| < NN : < DIGIT >< DIGIT > >
| < ALPHABET : [ "a"-"z", "A"-"Z" ] >
| < SIGN : "+" | "-" >	
| < DIGIT : [ "0"-"9" ] >
| < UNDERSCORE : "_" >
| < QUOTE : "'" >
| < NON_QUOTE_SPECIAL_CHARACTERS: "!" | "@" | "#" | "$" | "%" | "^" | "&" | "-" | "{" | "}" | "[" | "]" |
                  "~" | "`" | "+" | "*" | "_" | "=" | "\\" | "(" | ")" | "<" | ">" |
                  "?" | "," | "." | "\n" | "\t" | "\r" | ":" | ";" | "|" | "/">
| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > | < SPACE > >
| < UNEXPECTED : ~[] >
}

void command() throws DBException :
{}
{
  (
    queryList()
  )
| (
    < EXIT >
    (
      < SEMICOLON > | < END >
    )
    {
      manager.close();
      System.exit(0);
    }
  )
}

void queryList() throws DBException :
{
  int q;
}
{
  (
    q = query()
    (
      (
        //when query ends at end of line
        < END >
        {
          printMessage(q);
          //prompt when new query starts
          System.out.print(PROMPT);
        }
      )
    | (
        //for query sequence with semicolon concatenated with another query
        < SEMICOLON >
        {
          printMessage(q);
        }
      )
    )
  )+
}

int query() throws DBException :
{
  int q;
}
{
  //query returns q, which is used to print correct message by printMessage(q)
  (
    (
      createTableQuery()
      {
        q = PRINT_CREATE_TABLE;
      }
    )
  | (
      dropTableQuery()
      {
        q = PRINT_DROP_TABLE;
      }
    )
  | (
      descQuery()
      {
        q = PRINT_DESC;
      }
    )
  | (
      insertQuery()
      {
        q = PRINT_INSERT;
      }
    )
  | (
      deleteQuery()
      {
        q = PRINT_DELETE;
      }
    )
  | (
      selectQuery()
      {
        q = PRINT_SELECT;
      }
    )
  | (
      showTablesQuery()
      {
        q = PRINT_SHOW_TABLES;
      } 
    )
  )
  { 
    return q;
  }
}

//below regex for queries are similar to the ones in grammar file. 

/// 0. easy ones
void dropTableQuery() throws DBException :
{
  String tableName;
}
{
  < DROP >
  < TABLE >
  tableName = tableName()
  {
    String result = manager.dropTable(tableName);
    System.out.println(result);
  }
}
void descQuery() throws DBException :
{
  String tableName;
}
{
  < DESC >
  tableName = tableName()
  {
    String result = manager.descTable(tableName);
    System.out.println(result);
  }
}

void showTablesQuery() throws DBException :
{}
{
  < SHOW >
  < TABLES >
  {
    String result = manager.showTables();
    System.out.println(result);
  }
}

/// 0. easy ones 

/// 1. for createTableQuery()

void createTableQuery() throws DBException :
{
  String tableName;
  CreateQuery createQuery;
}
{
  < CREATE >
  < TABLE >
  tableName = tableName()
  {
    createQuery = new CreateQuery(tableName);
  }
  tableElementList(createQuery)
  {
    String result = manager.createTable(createQuery);
    System.out.println(result);
  }
}

void tableElementList(CreateQuery createQuery) :
{}
{
  < LEFT_PAREN >
  tableElement(createQuery)
  (
    < COMMA >
    tableElement(createQuery)
  )*
  < RIGHT_PAREN >
}

void tableElement(CreateQuery createQuery) :
{}
{
  columnDefinition(createQuery)
| tableConstraintDefinition(createQuery)
}

void columnDefinition(CreateQuery createQuery) :
{
  ColumnSchema column;
  String name;
}
{
  name = columnName()
  {
    column = new ColumnSchema(name);
  }
  dataType(column)
  (
    < NOT >
    < NULL >
    {
      column.setNullable(false);
    }
  )?
  {
    createQuery.addColumn(column);
  }
}

void tableConstraintDefinition(CreateQuery createQuery) :
{}
{
  primaryKeyConstraint(createQuery)
| referentialConstraint(createQuery)
}

void primaryKeyConstraint(CreateQuery createQuery) :
{
  ArrayList<String> primaryKeyNames;
}
{
  < PRIMARY >
  < KEY >
  primaryKeyNames = columnNameList()
  {
    for (String columnName : primaryKeyNames) {
      createQuery.addPrimaryKeyColumn(columnName);
    }
  }
}

void referentialConstraint(CreateQuery createQuery) :
{
  ArrayList<String> referencings;
  ArrayList<String> referenceds;
  String targetTableName;
  CreateQuery.ReferenceConstraint referenceData;
}
{
  < FOREIGN >
  < KEY >
  referencings = columnNameList()
  < REFERENCES >
  targetTableName = tableName()
  referenceds = columnNameList()
  {
    referenceData = createQuery.new ReferenceConstraint();
    referenceData.setReferencings(referencings);
    referenceData.setReferenceds(referenceds);
    referenceData.setTargetTableName(targetTableName);
    createQuery.addReference(referenceData);
  }
}

ArrayList<String> columnNameList() :
{
  ArrayList<String> names;
  String name;
}
{
  < LEFT_PAREN >
  name = columnName()
  {
    names = new ArrayList<String>();
    names.add(name);
  }
  (
    < COMMA >
    name = columnName()
    {
      names.add(name);
    }
  )*
  < RIGHT_PAREN >
  {
    return names;
  }
}

void dataType(ColumnSchema column) :
{
  Token charLength;
  DataType type = new DataType();
}
{
  (
    < INT >
    {
      type.baseType = BaseType.INT;
    }
  | (
      < CHAR >
      < LEFT_PAREN >
      charLength = < INT_VALUE >
      < RIGHT_PAREN >
      {
        type.baseType = BaseType.CHAR;
        type.charLength = Integer.parseInt(charLength.toString());
      }
    )
  | < DATE >
    {
      type.baseType = BaseType.DATE;
    }
  )
  {
    column.setDataType(type);
  }
}

String tableName() :
{
  Token name;
}
{
  name = < LEGAL_IDENTIFIER >
  {
    return name.toString().toLowerCase();
  }
}

String columnName() :
{
  Token name;
}
{
  name = < LEGAL_IDENTIFIER >
  {
    return name.toString().toLowerCase();
  }
}

/// 1. for createTableQuery


/// 2. for selectQuery

void selectQuery() :
{}
{
  < SELECT >
  selectList()
  tableExpression()
}

void selectList() :
{}
{
  < ASTERISK >
| (
    selectedColumn()
    (
      < COMMA >
      selectedColumn()
    )*
  )
}
void selectedColumn() :
{}
{
  (
    //tableName & columnName are same token <LEGAL_IDENITFIER >, so need to lookahead 2
    LOOKAHEAD(2)
    tableName()
    < PERIOD >
  )?
  columnName()
  (
    < AS >
    columnName()
  )?
}

void tableExpression():
{}
{
  fromClause()
  (
    whereClause()
  )?
}

void fromClause():
{}
{
  < FROM >
  tableReferenceList()
}

void tableReferenceList():
{}
{
  referedTable()
  (
    < COMMA >
    referedTable()
  )*
}

void referedTable():
{}
{
  tableName()
  (
    < AS >
    tableName()
  )?
}

void whereClause() :
{}
{
  < WHERE >
  booleanValueExpression()
}

void booleanValueExpression() :
{}
{
  booleanTerm()
  (
    < OR >
    booleanTerm()
  )*
}

void booleanTerm():
{}
{
  booleanFactor()
  (
    < AND >
    booleanFactor()
  )*
}

void booleanFactor():
{}
{
  (
    < NOT >
  )?
  booleanTest()
}

void booleanTest():
{}
{
  predicate()
| parenthesizedBooleanExpression()
}

void parenthesizedBooleanExpression():
{}
{
  < LEFT_PAREN >
  booleanValueExpression()
  < RIGHT_PAREN >
}

void predicate():
{}
{
  //comparisonPredicate & nullPredicate can both start with tableName()< PERIOD >columnName()
  //so need to lookahead 4
  LOOKAHEAD(4)
  comparisonPredicate()
| nullPredicate() 
}

void comparisonPredicate():
{}
{
  compOperand()
  < COMP_OP >
  compOperand() 
}

void compOperand():
{}
{
  comparableValue()
| (
    (
      //tableName & columnName are same token <LEGAL_IDENITFIER >, so need to lookahead 2
      LOOKAHEAD(2)
      tableName()
      < PERIOD >
    )?
    columnName()
 )
}

DataValue comparableValue():
{
  DataValue dataValue;
  Token rawValue;
}
{
  (
    rawValue = < INT_VALUE >
    {
      DataType type = new DataType();
      type.baseType = BaseType.INT;
      dataValue = new DataValue(type);
      dataValue.deserialize(rawValue.toString());
    }
  | rawValue = < CHAR_STRING >
    {
      DataType type = new DataType();
      type.baseType = BaseType.CHAR;
      dataValue = new DataValue(type);
      dataValue.deserialize(rawValue.toString());
    }
  | rawValue = < DATE_VALUE >
    {
      DataType type = new DataType();
      type.baseType = BaseType.DATE;
      dataValue = new DataValue(type);
      dataValue.deserialize(rawValue.toString());
    }
  )
  {
    return dataValue;
  }
}

void nullPredicate():
{}
{
  (
    //tableName & columnName are same token <LEGAL_IDENITFIER >, so need to lookahead 2
    LOOKAHEAD(2)
    tableName()
    < PERIOD >
  )?
  columnName()
  nullOperation()
}

void nullOperation():
{}
{
  < IS >
  (
    (
      < NOT >
    )?
    < NULL >
  )
}

/// 2. for selectQuery


/// 3. for insert,delete

void insertQuery() throws DBException :
{
  String tableName;
  InsertQuery insertQuery;
}
{
  < INSERT >
  < INTO >
  tableName = tableName()
  {
    insertQuery = new InsertQuery(tableName);
  }
  insertColumnsAndSource(insertQuery)
  {
    String result = manager.insert(insertQuery);
    System.out.println(result);
  }
}

void deleteQuery() :
{}
{
  < DELETE >
  < FROM > 
  tableName()
  (
    whereClause()
  )?
}

void insertColumnsAndSource(InsertQuery insertQuery) :
{
  ArrayList<String> columnNames;
  ArrayList<DataValue> columnValues;
}
{
  (
    columnNames = columnNameList()
    {
      insertQuery.setColumnNames(columnNames);
    }
  )?
  columnValues = valueList()
  {
    insertQuery.setColumnValues(columnValues);
  }
}

ArrayList<DataValue> valueList() :
{
  ArrayList<DataValue> dataValues = new ArrayList<DataValue>();
  DataValue dataValue;
}
{
  < VALUES >
  < LEFT_PAREN >
  dataValue = value()
  {
    dataValues.add(dataValue);
  }
  (
    < COMMA >
    dataValue = value()
    {
      dataValues.add(dataValue);
    }
  )*
  < RIGHT_PAREN >
  {
    return dataValues;
  }
}

DataValue value() :
{
  DataValue dataValue;
}
{
  (
    < NULL >
    {
      dataValue = new DataValue();
    }
  | dataValue = comparableValue()
  )
  {
    return dataValue;
  }
}

/// 3. for insert,delete











