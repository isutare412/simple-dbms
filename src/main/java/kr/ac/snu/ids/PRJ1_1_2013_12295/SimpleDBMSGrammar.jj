options
{
  static = true;
  DEBUG_PARSER = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(SimpleDBMSParser)
package kr.ac.snu.ids.PRJ1_1_2013_12295;

public class SimpleDBMSParser
{
  public static final String PROMPT = "DB_2013_12295> ";

  enum QueryType
  {
    SYNTAX_ERROR,
    CREATE_TABLE,
    DROP_TABLE,
    DESC,
    SHOW_TABLES,
  }

  public static void main(String args[]) throws ParseException
  {
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    System.out.print(PROMPT);

    while (true)
    {
      try
      {
        parser.command();
      }
      catch (Exception e)
      {
        printMessage(QueryType.SYNTAX_ERROR);
        SimpleDBMSParser.ReInit(System.in);
      }
    }
  }

  public static void printMessage(QueryType t)
  {
    switch(t)
    {
      case SYNTAX_ERROR:
        System.out.println("Syntax error");
        break;
      case CREATE_TABLE:
        System.out.println("\'CREATE TABLE\' requested");
        break;
      case DROP_TABLE:
        System.out.println("\'DROP TABLE\' requested");
        break;
      case DESC:
        System.out.println("\'DESC\' requested");
        break;
      case SHOW_TABLES:
        System.out.println("\'SHOW TABLES\' requested");
        break;
      default:
        System.out.println("unknown message accepted");
        break;
    }
    System.out.print(PROMPT);
  }
}

PARSER_END(SimpleDBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE : "create" >
| < DROP : "drop" >
| < DESC : "desc" >
| < SHOW : "show" >
| < TABLE : "table" >
| < TABLES : "tables" >
| < NOT : "not" >
| < NULL : "null" >
| < PRIMARY : "primary" >
| < FOREIGN : "foreign" >
| < KEY : "key" >
| < REFERENCES : "references" >
}

TOKEN :
{
  < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < UNDERSCORE : "_" >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>
| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >
| < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >
| < NN : < DIGIT > < DIGIT > >
| < SIGN : "+" | "-" >
| < DIGIT : [ "0"-"9" ] >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < ALPHABET : [ "a"-"z", "A"-"Z" ] >
| < QUOTE : "'" >
| < NON_QUOTE_SPECIAL_CHARACTER : ["!", "@", "#", "$", "%", "^", "&", "-",
    "{", "}", "[", "]", "~", "`", "+", "*", "_", "=", "\\", "(", ")", "<", ">",
    "?", ",", ".", "\n", "\t", "\r", ":", ";", "|", "/"] >
| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | " " |
    < NON_QUOTE_SPECIAL_CHARACTER > >
}

void command() :
{}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
      System.exit(0);
    }
  ) 
}

void queryList() :
{
  QueryType type;
}
{
  (
    type = query()
    < SEMICOLON >
    {
      printMessage(type);
    }
  )+
}

QueryType query() :
{
  QueryType type;
}
{
  (
    type = createTableQuery()
  | type = dropTableQuery()
  | type = descTableQuery()
  | type = showTablesQuery()
  )
  {
    return type;
  }
}

QueryType createTableQuery() :
{}
{
  < CREATE > < TABLE >
  tableName()
  tableElementList()
  {
    return QueryType.CREATE_TABLE;
  }
}

QueryType dropTableQuery() :
{}
{
  < DROP > < TABLE >
  tableName()
  {
    return QueryType.DROP_TABLE;
  }
}

QueryType descTableQuery() :
{}
{
  < DESC >
  tableName()
  {
    return QueryType.DESC;
  }
}

QueryType showTablesQuery() :
{}
{
  < SHOW > < TABLES >
  {
    return QueryType.SHOW_TABLES;
  }
}

void tableElementList() :
{}
{
  < LEFT_PAREN >
  tableElement()
  (
    < COMMA >
    tableElement()
  )*
  < RIGHT_PAREN >
}

void tableElement() :
{
}
{
  columnDefinition()
| tableConstraintDefinition()
}

void columnDefinition() :
{}
{
  columnName()
  dataType()
  (
    < NOT > < NULL >
  )?
}

void tableConstraintDefinition() :
{}
{
  primaryKeyConstraint()
| referentialConstraint()
}

void primaryKeyConstraint() :
{}
{
  < PRIMARY > < KEY >
  columnNameList()
}

void referentialConstraint() :
{}
{
  < FOREIGN > < KEY >
  columnNameList()
  < REFERENCES >
  tableName()
  columnNameList()
}

void columnNameList() :
{}
{
  < LEFT_PAREN >
  columnName()
  (
    < COMMA >
    columnName()
  )*
  < RIGHT_PAREN >
}

void dataType() :
{}
{
  < INT >
| (
    < CHAR >
    < LEFT_PAREN >
    < INT_VALUE >
    < RIGHT_PAREN >
  )
| < DATE >
}

void tableName() :
{}
{
  < LEGAL_IDENTIFIER >
}

void columnName() :
{}
{
  < LEGAL_IDENTIFIER >
}